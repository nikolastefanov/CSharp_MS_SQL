USE SoftUni

--zad--1

GO

CREATE PROCEDURE usp_GetEmployeesSalaryAbove35000 
AS
BEGIN
     SELECT FirstName,LastName
	 FROM Employees
	 WHERE Salary>35000
END


EXEC  usp_GetEmployeesSalaryAbove35000 


--zad--2

GO

CREATE PROCEDURE usp_GetEmployeesSalaryAboveNumber(@minSalary DECIMAL(18,4))
AS
BEGIN
     SELECT FirstName,lastName
	 FROM Employees
	 WHERE Salary>=@minSalary
END

EXEC usp_GetEmployeesSalaryAboveNumber 48100

DROP PROCEDURE usp_GetEmployeesSalaryAboveNumber


--zad--3

GO

CREATE OR ALTER PROCEDURE usp_GetTownsStartingWith(@str NVARCHAR(MAX))
AS
BEGIN
SELECT [Name] AS [Town]
           FROM Towns
	WHERE [Name]LIKE @str+'%'

END

EXEC usp_GetTownsStartingWith 'b'



--zad--4

GO

CREATE PROCEDURE usp_GetEmployeesFromTown(@townName VARCHAR(50))
AS
BEGIN
     SELECT
	       e.FirstName,
		   e.LastName
		FROM Employees AS e
		INNER JOIN Addresses AS a
		ON e.AddressID=a.AddressID
		INNER JOIN Towns AS t
		ON a.TownID=t.TownID
		WHERE t.[Name]=@townName
END


EXEC usp_GetEmployeesFromTown 'Sofia'


--zad--5

GO 

CREATE FUNCTION ufn_GetSalaryLevel(@salary DECIMAL(18,4)) 
RETURNS VARCHAR(7)
BEGIN 
      DECLARE @salaryLevel VARCHAR(7)
	  IF(@salary<30000)
	      BEGIN 
	           SET @salaryLevel='Low'
         END
	ELSE IF(@salary>=30000 
	           AND @salary<=50000)
		  BEGIN
		      SET @salaryLevel='Average'
		   END
	ELSE
	   BEGIN
	        SET @salaryLevel='High'
	END
RETURN @salaryLevel
END

GO

   SELECT 
         Salary,
          dbo.ufn_GetSalaryLevel (Salary)
	FROM Employees AS [Salary Level]

GO


--zad--6

GO

CREATE PROCEDURE usp_EmployeesBySalaryLevel(
                        @salaryLevel VARCHAR(7))
AS
BEGIN 
     SELECT FirstName,LastName
	    FROM Employees
	WHERE dbo.ufn_GetSalaryLevel (Salary)=@salaryLevel
END
		  


EXEC usp_EmployeesBySalaryLevel 'High'



--zad--7

USE SoftUni

GO

CREATE FUNCTION ufn_IsWordComprised(@setOfLetters NVARCHAR(MAX), @word NVARCHAR(MAX)) 
RETURNS BIT
AS
  BEGIN
     DECLARE @i INT=1
	 WHILE (@i<=LEN(@word))
	 BEGIN
	      DECLARE @currChar CHAR=SUBSTRING(@word,@i,1)
	       DECLARE	@charIndex INT=
	                  CHARINDEX(@currChar,@setOfLetters)
		   IF(@charIndex=0)
		      BEGIN
		          RETURN 0
			   END
	      SET @i=@i+1
     END
RETURN 1
END


GO

SELECT dbo.ufn_IsWordComprised('oistmiahf','Sofia') 

--zad--8

GO 

CREATE OR ALTER PROCEDURE usp_DeleteEmployeesFromDepartment
                             (@departmentId INT)
AS
BEGIN

--this query return all Id's of the Employees,
--who is going to be deleted
--ne wloza w zaawkata!!!

   --SELECT EmployeeID From Employees
   --WHERE DepartmentID=@departmentId


   --First delete all records from EmployeesProjects
   --where EmployeeID is in to-be deleted-ID
DELETE FROM EmployeesProjects
  WHERE EmployeeID IN (SELECT EmployeeID FROM Employees
                       WHERE DepartmentID =@departmentId)

   --Set ManagerID to NULL ,where Manager is
   --an Employee who is going to be deleted
   --(for Employees)


UPDATE Employees
SET ManagerID=NULL
WHERE ManagerID IN (
                      SELECT EmployeeID FROM Employees
                       WHERE DepartmentID =@departmentId)


--Alter column ManagerID in Departnments
--table and make it NULLABLE

ALTER TABLE Departments
ALTER COLUMN ManagerID INT

--Set ManagerID to NULL, where Manager is 
--an Employee who is going to be deleted
--(for Department)


UPDATE Departments
SET  ManagerID=NULL
WHERE ManagerID IN (
                      SELECT EmployeeID FROM Employees
                       WHERE DepartmentID =@departmentId)




DELETE FROM Employees
WHERE DepartmentID =@departmentId


DELETE FROM Departments
WHERE DepartmentID =@departmentId

SELECT COUNT(*) FROM Employees
WHERE DepartmentID=@departmentId

END

--1--Query return Id of Employees of
--          to-be-deleted Department
--2--Remove all rows where EmployeeID is in
--    to-be-deleted (for EmployeesProjects)
--3--Set ManagerID =NULL, where MenagerID
--    is in to-be-deleted (for Employees)
-- 4--Set ManagerID=NULL, where ManagerID
--       is in to-be-deleted





--zad--9

USE [Bank]

GO 

CREATE PROCEDURE usp_GetHoldersFullName 
AS
BEGIN
        SELECT CONCAT([FirstName],' ',[LastName]) AS [Full Name]
		       FROM AccountHolders
END

EXEC usp_GetHoldersFullName 

--zad--10

USE [Bank]

CREATE PROCEDURE usp_GetHoldersWithBalanceHigherThan(@minBalance DECIMAL(18,4))
AS
BEGIN
      SELECT FirstName,LastName FROM Accounts AS a
	  INNER JOIN AccountHolders AS ah
	  ON a.AccountHolderId=ah.Id
	  GROUP BY FirstName,LastName
	  HAVING SUM(Balance)>@minBalance
	  ORDER BY FirstName,LastName
END


EXEC usp_GetHoldersWithBalanceHigherThan 23400.0000


--zad--11

GO

CREATE FUNCTION ufn_CalculateFutureValue(
                           @sum DECIMAL(18,4),
						   @yir FLOAT,
						   @yearsCount INT)

RETURNS DECIMAL(18,4)
AS
BEGIN
     DECLARE @futureValue DECIMAL(18,4)
      SET  @futureValue=@sum*(POWER((1+@yir),@yearsCount))
     RETURN @futureValue
END

GO

SELECT dbo.ufn_CalculateFutureValue(1000,0.1,5)

--zad--12

GO

SELECT*FROM Accounts
SELECT*FROM AccountHolders


GO 
CREATE  OR ALTER PROCEDURE usp_CalculateFutureValueForAccount(
                         @AccountId INT, @InterestRate FLOAT)
AS
BEGIN
SELECT a.Id AS [Account Id],
	   ah.FirstName AS [First Name],
	   ah.LastName AS [Last Name],
	   a.Balance,
	   dbo.ufn_CalculateFutureValue(
	          Balance, @InterestRate, 5) AS [Balance in 5 years]
  FROM AccountHolders AS ah
  JOIN Accounts AS a ON ah.Id = a.Id
 WHERE a.Id = @AccountId
END

 GO



--zad--13

USE Diablo

GO 

CREATE FUNCTION ufn_CashInUsersGames(@gameName NVARCHAR(50))
RETURNS TABLE
AS 
RETURN  SELECT (
 
               SELECT SUM(Cash) AS [SumCash]
               FROM(
                          SELECT
	                            g.[Name],
			                     ug.Cash,
			                    ROW_NUMBER() OVER(PARTITION BY g.[Name]
			                                  ORDER BY ug.Cash DESC) AS [RowNum]
		                  FROM Games AS g
		                  INNER JOIN UsersGames As ug
		                  ON g.Id=ug.GameId
		                  WHERE g.[Name]=@gameName
	               ) As [RowNumQuery]
	                WHERE [RowNum] %2 <>0 
            ) AS [SumCash]

GO

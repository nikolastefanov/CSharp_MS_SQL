USE tempdb
GO
-- Create Table
CREATE TABLE FirstIndex (ID INT, 
						FirstName VARCHAR(100), 
						LastName VARCHAR(100), 
						City VARCHAR(100))
GO
-- Insert One Hundred Thousand Records
-- INSERT 1
INSERT INTO FirstIndex (ID,FirstName,LastName,City)
SELECT TOP 100000 ROW_NUMBER() OVER (ORDER BY a.name) RowID, 
					'Bob', 
					CASE WHEN  ROW_NUMBER() OVER (ORDER BY a.name)%2 = 1 THEN 'Smith' 
					ELSE 'Brown' END,
					CASE WHEN ROW_NUMBER() OVER (ORDER BY a.name)%10 = 1 THEN 'New York' 
						WHEN  ROW_NUMBER() OVER (ORDER BY a.name)%10 = 5 THEN 'San Marino' 
						WHEN  ROW_NUMBER() OVER (ORDER BY a.name)%10 = 3 THEN 'Los Angeles' 
					ELSE 'Houston' END
FROM sys.all_objects a
CROSS JOIN sys.all_objects b
GO
-- Truncate Table
TRUNCATE TABLE FirstIndex
GO
-- Create 10 indexes
CREATE NONCLUSTERED INDEX [IX_FirstIndex_ID] ON [dbo].[FirstIndex] 
(
	[ID] ASC
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_FirstIndex_FirstName] ON [dbo].[FirstIndex] 
(
	[FirstName] ASC
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_FirstIndex_LastName] ON [dbo].[FirstIndex] 
(
	[LastName] ASC
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_FirstIndex_City] ON [dbo].[FirstIndex] 
(
	[City] ASC
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_FirstIndex_ID_FirstName] ON [dbo].[FirstIndex] 
(
	[ID] ASC,
	[FirstName] ASC
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_FirstIndex_ID_LastName] ON [dbo].[FirstIndex] 
(
	[ID] ASC,
	[LastName] ASC
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_FirstIndex_ID_City] ON [dbo].[FirstIndex] 
(
	[ID] ASC,
	[City] ASC
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_FirstIndex_FirstName_LastName] ON [dbo].[FirstIndex] 
(
	[FirstName] ASC,
	[LastName] ASC
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_FirstIndex_FirstName_City] ON [dbo].[FirstIndex] 
(
	[FirstName] ASC,
	[City] ASC
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_FirstIndex_LastName_City] ON [dbo].[FirstIndex] 
(
	[LastName] ASC,
	[City] ASC
) ON [PRIMARY]
GO
-- Insert One Hundred Thousand Records
-- INSERT 2
INSERT INTO FirstIndex (ID,FirstName,LastName,City)
SELECT TOP 100000 ROW_NUMBER() OVER (ORDER BY a.name) RowID, 
					'Bob', 
					CASE WHEN  ROW_NUMBER() OVER (ORDER BY a.name)%2 = 1 THEN 'Smith' 
					ELSE 'Brown' END,
					CASE WHEN ROW_NUMBER() OVER (ORDER BY a.name)%10 = 1 THEN 'New York' 
						WHEN  ROW_NUMBER() OVER (ORDER BY a.name)%10 = 5 THEN 'San Marino' 
						WHEN  ROW_NUMBER() OVER (ORDER BY a.name)%10 = 3 THEN 'Los Angeles' 
					ELSE 'Houston' END
FROM sys.all_objects a
CROSS JOIN sys.all_objects b
GO
/*
Question 1: Which insert took most the time INSERT 1 or INSERT 2
WHY?
*/
-- Truncate Table
TRUNCATE TABLE FirstIndex
GO



USE SoftUni

--zad--1

SELECT TOP(5) e.EmployeeID, e.JobTitle
,e.AddressID, a.AddressText
FROM Employees AS e

INNER JOIN Addresses AS a
  ON e.AddressID=a.AddressID
ORDER BY e.AddressID ASC


--zad--2

SELECT TOP(50) e.FirstName,e.LastName
,t.[Name] AS Town
,a.AddressText
FROM Employees AS e
INNER JOIN Addresses AS a
  ON e.AddressID=a.AddressID
INNER JOIN Towns AS t
  ON t.TownID=a.TownID
  ORDER BY e.FirstName ASC, e.LastName ASC

  --zad--3

  SELECT
        e.EmployeeID
		,e.FirstName
		,e.LastName
		,d.[Name] AS [DepartmentName]
  FROM Employees AS e
  INNER JOIN Departments AS d
  ON d.DepartmentID=e.DepartmentID
  WHERE d.[Name]='Sales'
  ORDER BY e.EmployeeId ASC


  -- zad --4

  SELECT TOP(5)
        e.EmployeeID
		,e.FirstName
		,e.Salary
		,d.[Name] AS [DepartmentName]
  FROM Employees AS e
  INNER JOIN Departments AS d
  ON d.DepartmentID=e.DepartmentID
  WHERE e.[Salary]>15000
  ORDER BY e.DepartmentId ASC


  --zad--5

  SELECT TOP(3) e.EmployeeID,e.FirstName
    FROM Employees AS e

	LEFT OUTER JOIN EmployeesProjects AS ep
	ON e.EmployeeID=ep.EmployeeID
	WHERE ep.ProjectID  IS NULL
	ORDER BY  e.EmployeeID

	--zad--6
	SELECT e.FirstName, e.LastName, e.HireDate,  d.Name as DeptName
FROM Employees e
  INNER JOIN Departments d
  ON (e.DepartmentId = d.DepartmentId
  AND e.HireDate > '1/1/1999'
  AND d.Name IN ('Sales', 'Finance'))
ORDER BY e.HireDate ASC



	--zad--7

	SELECT TOP(5)
	e.EmployeeID,e.FirstName
	,p.[Name] AS [ProjectName]
	FROM Employees AS e

	INNER JOIN EmployeesProjects AS ep
	     ON e.EmployeeID=ep.EmployeeID
	INNER JOIN Projects AS p
	     On ep.ProjectID=p.ProjectID

  WHERE p.StartDate>'08-13-2002'
       AND EndDate IS NULL
  ORDER BY e.EmployeeID


  --zad --8

  SELECT e.EmployeeID,e.FirstName,
  CASE 
      WHEN DATEPART(YEAR,p.StartDate)>=2005 THEN NULL
	  ELSE P.[Name]
	  END AS [ProjectName]
  FROM Employees AS e

  INNER JOIN EmployeesProjects AS ep
      ON e.EmployeeID=ep.EmployeeID
INNER JOIN Projects AS p
    ON ep.ProjectID=p.ProjectID
WHERE e.EmployeeID=24

--zad--9

SELECT*FROM Employees

SELECT e1.EmployeeID
       ,e1.FirstName
	   ,e2.EmployeeId 
	   ,e2.FirstName AS [ManagerName]
    FROM Employees AS e1
	INNER JOIN Employees As e2
	ON e2.EmployeeID=e1.ManagerId
	WHERE e1.ManagerID IN (3,7)
	ORDER BY e1.EmployeeId ASC


--zad--10

USE [SoftUni]

SELECT TOP(50) e1.EmployeeID,
    CONCAT(e1.FirstName,' ',e1.LastName)
	                     AS [EmployeeName],
	CONCAT(e2.FirstName,' ',e2.LastName)
	                     AS [ManagerName],
	d.[Name] AS [DepartmentName]
FROM Employees AS e1
 LEFT OUTER JOIN Employees AS e2
      ON e1.ManagerID=e2.EmployeeID
INNER JOIN Departments AS d
     ON e1.DepartmentID=d.DepartmentID
ORDER BY e1.EmployeeID

--zad--11

SELECT MIN([AverageSalary]) AS [MinAverageSalary]
  FROM 
  (
    SELECT DepartmentID,AVG(Salary) AS [AverageSalary]
	  FROM Employees
	  GROUP BY DepartmentID
  ) AS [AverageSalaryQuery]


  --zad--12

  USE Geography

  SELECT
       c.CountryCode
	   ,m.MountainRange
	   ,p.PeakName
	   ,p.Elevation
	   FROM Countries AS c
 INNER JOIN MountainsCountries  AS mc
 ON c.CountryCode=mc.CountryCode
 INNER JOIN Mountains AS m
 ON mc.MountainId=m.Id
 INNER JOIN Peaks AS p
 ON p.MountainID=m.Id
 WHERE	c.CountryCode='BG'
     AND p.Elevation>=2835
ORDER BY p.Elevation DESC





--zad ---13

USE Geography

SELECT
     CountryCode,
	 COUNT(MountainID) AS [MountainRange]
       FROM MountainsCountries
WHERE CountryCode IN ('US','RU','BG')
GROUP BY CountryCode


--zad--14

SELECT TOP(5)
     c.CountryName
	 ,r.RiverName
     FROM Countries AS c
	 LEFT OUTER JOIN CountriesRivers AS cr
	 ON c.CountryCode=cr.CountryCode
	 LEFT OUTER JOIN Rivers AS r
	 ON cr.RiverId=r.Id
	 WHERE c.ContinentCode='AF'
	 ORDER BY c.CountryName ASC

	 

  --zad--15

  SELECT ContinentCode
         ,CurrencyCode
		 ,CurrencyCount AS [CurrencyUsage]
FROM(

     SELECT ContinentCode
              ,CurrencyCode
		     ,[CurrencyCount]
		      ,DENSE_RANK() OVER(
		            PARTITION BY ContinentCode
		    ORDER BY CurrencyCount DESC)
		            AS [CurrencyRank]
	     FROM (
	          SELECT ContinentCode
		            ,CurrencyCode
				     ,COUNT(*) AS [CurrencyCount]
			   FROM Countries
			   GROUP BY ContinentCode,CurrencyCode
	  	      ) AS [CurrencyCountQuery]
	     WHERE CurrencyCount>1

)  AS [CurrencyRankingQuery]

WHERE CurrencyRank=1
ORDER BY ContinentCode ASC

--zd--16

SELECT*FROM Countries
SELECT*FROM MountainsCountries
SELECT*FROM Mountains


SELECT COUNT(*) AS [Count]
   FROM
   (
      SELECT 
           c.CountryName
	       ,m.MountainRange
       FROM Countries AS c
	          LEFT OUTER JOIN MountainsCountries AS mc
	              ON c.CountryCode=mc.CountryCode
	          LEFT OUTER JOIN Mountains AS m
	              ON mc.MountainId=m.Id
	          WHERE m.MountainRange IS NULL
	) AS [CountQuery]




--zad--17

        SELECT TOP(5)
                  CountryName
			      ,MAX(p.Elevation) AS [HigestPeakElevation]
			       ,MAX(r.[Length]) AS [LongestRiverLength]
		     FROM Countries AS c
	   LEFT OUTER JOIN CountriesRivers AS cr
	   ON cr.CountryCode=c.CountryCode
	   LEFT OUTER JOIN  Rivers AS r
	   ON cr.RiverId=r.Id
	   LEFT OUTER JOIN MountainsCountries AS mc
	   ON c.CountryCode=mc.CountryCode
	   LEFT OUTER JOIN Mountains AS m
	   ON mc.MountainId=m.Id
	   LEFT OUTER JOIN Peaks AS p
	   ON p.MountainId=m.Id
	   GROUP BY c.CountryName
	   ORDER BY [HigestPeakElevation] DESC
	             ,[LongestRiverLength] DESC
				 ,CountryName ASC


	--zad--18

	SELECT*FROM Countries

SELECT TOP(5) [Country],
  CASE 
  WHEN [PeakName] IS NULL THEN '(no highest peak)'
  ELSE [PeakName]
  END AS [HighestPeakName],

  CASE
  WHEN Elevation IS NULL THEN 0
  ELSE Elevation
  END AS [HighestPeakElevation],

  CASE
  WHEN MountainRange  IS NULL THEN '(no mountain)'
  ELSE MountainRange
  END AS [Mountain]

FROM 
 (

   SELECT*,
       DENSE_RANK() OVER(
	     PARTITION BY  [Country] 
		           ORDER BY [Elevation] DESC
				   ) AS [PeakRank]
	FROM
        (
	          SELECT
	               CountryName AS [Country]
				   ,p.PeakName
				   ,p.Elevation
				   ,m.MountainRange
				  FROM Countries AS c
                      LEFT OUTER JOIN  MountainsCountries AS mc
					  ON c.CountryCode=mc.CountryCode
					  LEFT OUTER JOIN Mountains AS m
					  ON mc.MountainId=m.Id
					  LEFT OUTER JOIN Peaks As p
					  On p.MountainId=m.Id
		) AS [FullInfoQuery]

  )AS [PeakRankingsQuery]
  WHERE PeakRank=1
  ORDER BY Country ASC,[HighestPeakName] ASC

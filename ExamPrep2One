CREATE DATABASE School

USE School

CREATE TABLE Students
(

Id INT PRIMARY KEY IDENTITY,
FirstName NVARCHAR(30) NOT NULL,
MiddleName	NVARCHAR(25),
LastName NVARCHAR(30) NOT NULL,
Age	int CHECK(Age>=0 AND Age>5 AND Age<100) NOT NULL,
[Address]	NVARCHAR(50) ,
Phone NVARCHAR(10)
)

CREATE TABLE Subjects
(

Id	INT PRIMARY KEY IDENTITY,
[Name]	NVARCHAR(20) NOT NULL,
Lessons	INT CHECK(Lessons>0) NOT NULL
)


CREATE TABLE Exams
(
Id INT PRIMARY KEY IDENTITY,
[Date] DATETIME,
SubjectId INT FOREIGN KEY
  REFERENCES Subjects(Id)
  )

  CREATE TABLE StudentsExams
(
StudentId INT FOREIGN KEY 
   REFERENCES Students(Id),
   ExamId INT FOREIGN KEY
          REFERENCES Exams(Id),
Grade DECIMAL(5,2) CHECK(Grade>=2 AND Grade<=6) NOT NULL,

CONSTRAINT PK_StudentsExams PRIMARY KEY (StudentId,ExamId)
)


CREATE TABLE Teachers
(
Id	INT PRIMARY KEY IDENTITY,
FirstName	NVARCHAR(20) NOT NULL,
LastName	NVARCHAR(20) NOT NULL,
[Address] NVARCHAR(20) NOT NULL,
Phone	NVARCHAR(10),
SubjectId INT FOREIGN KEY
      REFERENCES Subjects(Id)
	  )
	 
	 CREATE TABLE StudentsSubjects
(
Id INT PRIMARY KEY IDENTITY,
StudentId INT FOREIGN KEY
      REFERENCES Students(Id),
SubjectId	INT FOREIGN KEY
      REFERENCES Subjects(Id),
Grade	DECIMAL(5,2) CHECK(Grade>=2 AND Grade<=6) NOT NULL

)

CREATE TABLE StudentsTeachers
(
StudentId	INT FOREIGN KEY
         REFERENCES Students(Id) NOT NULL,
TeacherId INT FOREIGN KEY
          REFERENCES Teachers(Id) NOT NULL,
 CONSTRAINT PK_StudentsTeachrs PRIMARY KEY (StudentId,TeacherID)

		  )

		
	


	--zad--1

	INSERT INTO Teachers(FirstName,LastName	,[Address],	Phone,	SubjectId)
	VALUES
        ('Ruthanne',	'Bamb',	'84948 Mesta Junction',	3105500146	,6),
       ('Gerrard',	'Lowin',	'370 Talisman Plaza',	3324874824,	2),
         ('Merrile',	'Lambdin'	,'81 Dahle Plaza	',4373065154	,5),
        ('Bert',	'Ivie',	'2 Gateway Circle',	4409584510,	4)

		INSERT INTO		Subjects([Name],	Lessons)
		VALUES
              ('Geometry',	12),
               ('Health',	10),
               ('Drama',	7),
               ('Sports',	9)


		--zad--3

		SELECT*FROM StudentsSubjects


		UPDATE StudentsSubjects
		 SET Grade=6.00
		 WHERE SubjectID IN (1,2) AND Grade>=5.50


	--zad--4

	SELECT*FROM Teachers

	DELETE FROM StudentsTeachers
	WHERE TeacherId IN (
	                     SELECT Id FROM Teachers
						 WHERE Phone LIKE '%72%')

	DELETE FROM  Teachers
	WHERE Phone LIKE '%72%'



	--zad--5

	SELECT*FROM Students

	SELECT FirstName, LastName,Age
	         FROM Students
    WHERE Age>=12
	ORDER BY FirstName ASC,LastName ASC


	--zad--6
	

	SELECT s.FirstName, s.LastName,
	       COUNT(t.Id) AS [TeachersCount]
	       FROM Students AS s
	 JOIN StudentsTeachers AS st
	ON st.StudentId=s.Id
	JOIN Teachers AS t
	ON st.TeacherId=t.Id
	GROUP BY s.[FirstName],s.[LastName]



	--zad--7

	SELECT CONCAT(s.FirstName,' ',s.LastName) AS [Full Name]
	
	      FROM Students AS s
	LEFT OUTER JOIN StudentsExams AS se
	ON se.StudentId=s.Id
	LEFT OUTER JOIN Exams AS e
	ON e.Id=se.ExamId
	WHERE se.[StudentId] IS NULL
	ORDER BY [Full Name] ASC



	--zad--8

	SELECT TOP(10)
	     s.FirstName,
		 s.LastName,
		 FORMAT(AVG(se.Grade),'N') AS [Grade]
	          FROM Students AS s
   JOIN StudentsExams AS se
   ON se.StudentId=s.Id
   GROUP BY s.FirstName ,s.LastName
   ORDER BY [Grade] DESC,s.FirstName,s.LastName



   
	 

	--zad--9

	SELECT CONCAT(s.FirstName,' ',s.MiddleName,' ',s.LastName)
	         FROM Students AS s

 
	 SELECT CONCAT(s.FirstName,' ',ISNULL(s.MiddleName+' ',''),s.LastName) AS [Full Name]
	        FROM Students As s
	 LEFT OUTER JOIN StudentsSubjects As ss
	 ON ss.StudentId=s.Id
	 WHERE ss.SubjectId IS NUll
	 ORDER BY [Full Name]


	 --zad--10


	 SELECT s.[Name],
	   AVG(ss.Grade) AS [AverageGrade]
	           FROM Subjects AS s
	 JOIN StudentsSubjects AS ss
	ON ss.SubjectId=s.Id
	GROUP BY s.[Name],s.Id
	  ORDER BY s.Id ASC,s.[Name] ASC


	  SELECT* FROM Subjects
	  SELECT*FROM StudentsSubjects


--	  --zad--11
--	  GO
--	  CREATE FUNCTION udf_ExamGradesToUpdate(@studentId INT, @grade DECIMAL(15,2))
--	  RETURNS NVARCHAR(MAX)
--	  AS
--BEGIN
--
--	  DECLARE @studentIDTab INT=
--	   (SELECT TOP(1) StudentId 
--	               FROM StudentsExams
--			WHERE StudentId=@studentId)
--
--	IF(@studentIDTab IS NULL)
--	BEGIN
--	  RETURN 'The student with provided id does not exist in the school!'
--   END
--
--	  IF(@grade>6.00)
--	  BEGIN 
--	     RETURN 'Grade cannot be above 6.00!'
--     END

	  

	  
--  DECLARE @studentFirstName NVARCHAR(30)=
--      (SELECT TOP(1)FirstName FROM Students 
--	                   WHERE Id=@studentId)
-- DECLARE @bigGrade DECIMAL(15,2)=@grade+0.50
--
-- DECLARE @count INT=
--        (SELECT  COUNT(Grade)
--		         FROM StudentsExams
--		 WHERE StudentId=@studentId AND Grade>=@grade AND Grade<=@bigGrade)
--
--   RETURN 'You have to update '+ CAST(@count AS NVARCHAR(10))+ ' grades for the student '+@studentFirstName	  
--
--END
	  GO

	  SELECT dbo.udf_ExamGradesToUpdate(12, 6.20)

	  SELECT dbo.udf_ExamGradesToUpdate(12, 5.50)

	  SELECT dbo.udf_ExamGradesToUpdate(121, 5.50)


	  zad--12
	 --
	 --GO
	 --
	 --CREATE PROCEDURE usp_ExcludeFromsSchool @StudentId INT
	 --AS
	 --BEGIN
	 --DECLARE @studentTarget INT=
	 --                      ( SELECT Id
	 --                                FROM Students 
	--                       WHERE Id=@StudentId)
     -- IF(@studentTarget IS NULL)
	 --    BEGIN 
	--     THROW 50001,'This school has no student with the provided id!',1
	--	  RETURN
	-- END
	 --
	-- DELETE FROM StudentsExams
	--  WHERE StudentId=@studentTarget
	 --
	--  DELETE FROM StudentsSubjects
	--  WHERE StudentId=@studentTarget
	 --
	--  DELETE FROM StudentsTeachers
	--  WHERE StudentId=@studentTarget
	 --
	--  DELETE FROM Students
	--  WHERE Id=@studentTarget
	 --
	  --END

	  EXEC usp_ExcludeFromSchool 1
                                       SELECT COUNT(*) FROM Students


      EXEC usp_ExcludeFromSchool 301	



	  --EXAM GRADES
	  GO
	  CREATE OR ALTER Function udf_ExamGradesToUpdate(
	             @studentId INt, @grade DECIMAL(15,2))
	  RETURNS NVARCHAR(MAX)
	  AS
	  BEGIN 
	    IF(@grade>6.00)
		 BEGIN 
		   RETURN 'Grade cannot be above 6.00!'
	    END
		   DECLARE @studentIdTable INT=
		        (SELECT TOP(1)  StudentId
				       FROM StudentsExams
				WHERE StudentId=@studentId)
         IF(@studentIdTable IS NULL)
		   BEGIN
              RETURN 'The student with provided id does not exist in the school!'
		   END
     DECLARE @bigGrade INT=@grade+0.50

	DECLARE @firstName NVARCHAR(50)=
	         (SELECT TOP(1) FirstName
			        FROM Students 
			WHERE Id=@studentId)
   DECLARE @count INT=
           (SELECT COUNT(Grade)
		            FROM StudentsExams
			WHERE StudentId=@studentId AND
	Grade>=@grade AND Grade<=@bigGrade)
	       

       RETURN 'You have to update'+' '+ CAST(@count AS Nvarchar(50))+' '+ 'grades for the student'+' '+@firstName

	  END
	  GO

	  SELECT dbo.udf_ExamGradesToUpdate(12, 6.20)
	  			
      SELECT dbo.udf_ExamGradesToUpdate(12, 5.50)

	  SELECT dbo.udf_ExamGradesToUpdate(121, 5.50)


	  --Exclude_from shcool
	  GO
	  CREATE OR ALTER PROCEDURE usp_ExcludeFromSchool @StudentId INT
	  AS
	  
	  DECLARE @studentIdTable INT=
	      (SELECT TOP(1) Id
		              FROM Students		
	          WHERE Id=@StudentId)
	IF(@studentIdTable IS NUll)
	       BEGIN
		   THROW 50001,'This school has no student with the provided id!',1
		   END
	  

	  EXEC usp_ExcludeFromSchool 301

	  EXEC usp_ExcludeFromSchool 1
       SELECT COUNT(*) FROM Students

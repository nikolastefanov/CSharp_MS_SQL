CREATE DATABASE Airport

USE Airport


CREATE TABLE Planes
(
Id INT PRIMARY KEY IDENTITY,
[Name] VARCHAR(30) NOT NULL,
Seats INT NOT NULL,
[Range] INT NOT NULL
)


CREATE TABLE Flights
(
 Id	INT PRIMARY KEY IDENTITY,
DepartureTime	DATETIME,
ArrivalTime	DATETIME,
Origin	VARCHAR(50)	NOT NULL,
Destination	VARCHAR(50) NOT NULL,
PlaneId	INT FOREIGN KEY
  REFERENCES Planes
)

 CREATE TABLE Passengers
 (
Id	INT PRIMARY KEY IDENTITY,
FirstName VARCHAR(30) NOT NULL,
LastName  VARCHAR(30) NOT NULL,
Age	INT NOT NULL,
[Address]	VARCHAR(30) NOT NULL,
PassportId	VARCHAR(11) NOT NULL
)

CREATE TABLE LuggageTypes
(
Id	INT PRIMARY KEY IDENTITY,
[Type] VARCHAR(30) NOT NULL
)

CREATE TABLE Luggages
(
Id	INT PRIMARY KEY IDENTITY,
LuggageTypeId	INT FOREIGN KEY
  REFERENCES LuggageTypes(Id),
PassengerId	 INT FOREIGN KEY
  REFERENCES Passengers(Id)
  )

  
CREATE TABLE Tickets
(
Id INT PRIMARY KEY IDENTITY,
PassengerId	INT FOREIGN KEY
REFERENCES Passengers(Id),
FlightId INT FOREIGN KEY
REFERENCES Flights(Id),
LuggageId	INT FOREIGN KEY
REFERENCES Luggages(Id),
Price	DECIMAL(18,2) NOT NULL
)



--zad--2

INSERT INTO Planes([Name],Seats,[Range])
VALUES 
      ('Airbus 336',	112	,5132),
       ('Airbus 330',	432	,5325),
       ('Boeing 369',	231,	2355),
        ('Stelt 297',254,2143),
       ('Boeing 338',165,5111),
        ('Airbus 558',	387	,1342),
         ('Boeing 128',	345	,5541)

INSERT INTO LuggageTypes([Type])
VALUES 
       ('Crossbody Bag'),
        ('School Backpack'),
        ('Shoulder Bag')

--zad--3

UPDATE Tickets
SET Price *=1.13
WHERE FlightId IN
            (SELECT [Id] FROM Flights
			  WHERE Destination='Carlsbad')


	SELECT*FROM Flights

--zad --4

DELETE FROM Tickets
WHERE FlightId IN(
                   SELECT [Id] FROM Flights
                    WHERE Destination='Ayn Halagim')

DELETE FROM Flights
WHERE Destination='Ayn Halagim'


--zad--5
SELECT Origin,Destination FROM Flights
ORDER  BY  Origin ASC,Destination ASC
              
			  
--zad--6

SELECT
    Id,
	[Name],
	Seats,
	[Range]
	FROM Planes
WHERE [Name] LIKE '%tr%'
ORDER BY Id ASC, Seats ASC,[Range]ASC


--zad--7

SELECT*FROM Flights
SELECT*FROM Tickets

SELECT
     f.Id As [FlightId],
	 SUM(t.Price) As [Price]
	 FROM Flights AS f
JOIN Tickets AS t
ON t.FlightId=f.Id
GROUP BY f.Id
ORDER BY [Price] DESC,[FlightId] ASC


--zad--8

SELECT TOP(10)
       [FirstName],
	   [LastName],
	   [Price]
	    FROM Passengers AS p
    LEFT OUTER JOIN Tickets AS t
    ON t.PassengerId=p.Id

    ORDER BY [Price] DESC, [FirstName] ASC,[LastName] ASC

	--zad--9

	--Non Adventures Poeople

	SELECT [FirstName],[LastName],Age
	FROM Passengers AS p
	INNER JOIN Tickets AS t
	ON t.PassengerId=p.Id
	ORDER BY Age DESC, FirstName ASC,LastName ASC

	--zad--9

	SELECT*FROM Passengers
	SELECT*FROM Tickets
	SELECT*FROM Flights
	SELECT*FROM Planes



	SELECT*FROM Passengers As p
	JOIN Tickets AS t
	ON t.PassengerId=p.Id


	SELECT CONCAT(p.FirstName,' ',p.LastName) AS [Full Name],
	              pl.[Name] AS [Plane Name],
	              CONCAT(f.Origin,'-',f.Destination) AS [Trip],
	               lt.[Type] AS [LuggageType]
	FROM Passengers AS p
	JOIN Tickets AS t
	ON t.PassengerId=p.Id
	JOIN Flights As f
	ON t.FlightId=f.Id
	JOIN  Planes AS pl
	On f.PlaneId=pl.Id
	JOIN Luggages As l
	ON t.LuggageId=l.Id
	JOIN LuggageTypes AS lt
	On l.LuggageTypeId=lt.Id
	ORDER BY [Full Name], [Plane Name],
	         f.[Origin],f.[Destination],
			 [LuggageType]


	--zad--10

	SELECT
	   CONCAT(p.FirstName,' ',p.LastName) AS [Full Name],
	   f.[Origin],
	   f.[Destination]
	   FROM Passengers AS p
	JOIN Tickets AS t
	ON t.PassengerId=p.Id
	 JOIN Flights AS f
	ON t.FlightId=f.Id
	ORDER  BY [Full Name],f.[Origin],f.[Destination]

	--zad--11

	SELECT
	      p.FirstName AS [First Name],
		  p.LastName As [Last Name],
		  p.Age
		  FROM Passengers AS p
	LEFT OUTER JOIN Tickets AS t
	ON t.PassengerId=p.Id
	WHERE t.Id IS NUll
	ORDER BY p.Age DESC, [First Name] ASC, [Last Name] ASC


	--zad--12-Vacation

	GO
	CREATE FUNCTION udf_CalculateTickets(@origin VARCHAR(50),
	           @destination VARCHAR(50),@peopleCount INT) 
	RETURNS NVARCHAR(50)
	AS

BEGIN
	  IF(@peopleCount<=0)
	  BEGIN 
	     RETURN 'Invalid people count!'
   	 END 

		DECLARE @flaightId INT=
		     (SELECT TOP(1) Id FROM Flights
			   WHERE Origin=@origin AND
			       Destination=@destination)

	IF(@flaightId IS NULL)
	  BEGIN 
	   RETURN 'Invalid flight!'
	   END

	DECLARE @pricePerPerson DECIMAL(18,2)=
	                      (SELECT TOP(1) Price 
						      FROM Tickets AS t
						     WHERE t.FlightId=@flaightId)
						  
    DECLARE @totalPrice DECIMAL(24,2)=
	   @pricePerPerson*@peopleCount

	RETURN Concat('Total price',' ', @totalPrice)

END
GO

SELECT dbo.udf_CalculateTickets('Kolyshley','Rancabolang', 33)


--zad--12
GO
CREATE PROCEDURE usp_CancelFlights
AS
BEGIN 

--za proba

--SELECT*FROM Flights
--WHERE DATEDIFF(SECOND,DepartureTime,ArrivalTime)>0

UPDATE Flights
SET DepartureTime=NULL,ArrivalTime=NULL
WHERE DATEDIFF(SECOND,DepartureTime,ArrivalTime)>0

END

EXEC usp_CancelFlights



